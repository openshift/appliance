package manifests

import (
	"context"
	"fmt"
	"os"
	"path/filepath"

	"github.com/pkg/errors"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/yaml"

	"github.com/openshift/appliance/pkg/asset/config"
	"github.com/openshift/installer/pkg/asset"
)

const (
	PullSecretName = "appliance-pull-secret" //nolint:gosec // not a secret despite the word

	pullSecretKey   = ".dockerconfigjson"                      //nolint:gosec
	dummyPullSecret = `{"auths":{"":{"auth":"dXNlcjpwYXNz"}}}` //nolint:gosec
)

var pullSecretFilename = filepath.Join(clusterManifestDir, "pull-secret.yaml")

// AgentPullSecret generates the pull-secret file used by the agent installer.
type AgentPullSecret struct {
	File   *asset.File
	Config *corev1.Secret
}

var _ asset.WritableAsset = (*AgentPullSecret)(nil)

// Name returns a human friendly name for the asset.
func (*AgentPullSecret) Name() string {
	return "Agent PullSecret"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*AgentPullSecret) Dependencies() []asset.Asset {
	return []asset.Asset{
		&config.EnvConfig{},
	}
}

// Generate generates the AgentPullSecret manifest.
func (a *AgentPullSecret) Generate(_ context.Context, dependencies asset.Parents) error {
	secret := &corev1.Secret{
		TypeMeta: metav1.TypeMeta{
			APIVersion: "v1",
			Kind:       "Secret",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:      PullSecretName,
			Namespace: "",
		},
		StringData: map[string]string{
			pullSecretKey: dummyPullSecret,
		},
	}
	a.Config = secret

	configData, err := yaml.Marshal(secret)
	if err != nil {
		return errors.Wrap(err, "failed to marshal secret")
	}

	a.File = &asset.File{
		Filename: pullSecretFilename,
		Data:     configData,
	}

	return nil
}

// Files returns the files generated by the asset.
func (a *AgentPullSecret) Files() []*asset.File {
	if a.File != nil {
		return []*asset.File{a.File}
	}
	return []*asset.File{}
}

// Load returns the asset from disk.
func (a *AgentPullSecret) Load(f asset.FileFetcher) (bool, error) {
	file, err := f.FetchByName(pullSecretFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, errors.Wrap(err, fmt.Sprintf("failed to load %s file", pullSecretFilename))
	}

	config := &corev1.Secret{}
	if err := yaml.UnmarshalStrict(file.Data, config); err != nil {
		return false, errors.Wrapf(err, "failed to unmarshal %s", pullSecretFilename)
	}

	a.Config = config

	return true, nil
}
