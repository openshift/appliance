package manifests

import (
	"context"
	"fmt"
	"os"
	"path/filepath"

	"github.com/coreos/stream-metadata-go/arch"
	"github.com/pkg/errors"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/yaml"

	"github.com/openshift/appliance/pkg/asset/config"
	aiv1beta1 "github.com/openshift/assisted-service/api/v1beta1"
	"github.com/openshift/installer/pkg/asset"
)

const (
	infraEnvName = "appliance"
)

var (
	infraEnvFilename = filepath.Join(clusterManifestDir, "infraenv.yaml")
)

// InfraEnv generates the infraenv.yaml file.
type InfraEnv struct {
	File   *asset.File
	Config *aiv1beta1.InfraEnv
}

var _ asset.WritableAsset = (*InfraEnv)(nil)

// Name returns a human friendly name for the asset.
func (*InfraEnv) Name() string {
	return "InfraEnv Config"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*InfraEnv) Dependencies() []asset.Asset {
	return []asset.Asset{
		&config.ApplianceConfig{},
	}
}

// Generate generates the InfraEnv manifest.
func (i *InfraEnv) Generate(_ context.Context, dependencies asset.Parents) error {
	applianceConfig := &config.ApplianceConfig{}
	dependencies.Get(applianceConfig)

	infraEnv := &aiv1beta1.InfraEnv{
		ObjectMeta: metav1.ObjectMeta{
			Name:      infraEnvName,
			Namespace: "",
		},
		Spec: aiv1beta1.InfraEnvSpec{
			PullSecretRef: &corev1.LocalObjectReference{
				Name: PullSecretName,
			},
			CpuArchitecture: applianceConfig.GetCpuArchitecture(),
		},
	}

	i.Config = infraEnv

	configData, err := yaml.Marshal(infraEnv)
	if err != nil {
		return errors.Wrap(err, "failed to marshal infraenv")
	}

	i.File = &asset.File{
		Filename: infraEnvFilename,
		Data:     configData,
	}

	return nil
}

// Files returns the files generated by the asset.
func (i *InfraEnv) Files() []*asset.File {
	if i.File != nil {
		return []*asset.File{i.File}
	}
	return []*asset.File{}
}

// Load returns infraenv asset from the disk.
func (i *InfraEnv) Load(f asset.FileFetcher) (bool, error) {

	file, err := f.FetchByName(infraEnvFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, errors.Wrap(err, fmt.Sprintf("failed to load %s file", infraEnvFilename))
	}

	config := &aiv1beta1.InfraEnv{}
	if err := yaml.UnmarshalStrict(file.Data, config); err != nil {
		return false, errors.Wrapf(err, "failed to unmarshal %s", infraEnvFilename)
	}
	// If defined, convert to RpmArch amd64 -> x86_64 or arm64 -> aarch64
	if config.Spec.CpuArchitecture != "" {
		config.Spec.CpuArchitecture = arch.RpmArch(config.Spec.CpuArchitecture)
	}
	i.File, i.Config = file, config
	return true, nil
}
