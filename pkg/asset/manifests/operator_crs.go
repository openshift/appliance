package manifests

import (
	"context"
	"path/filepath"

	"github.com/pkg/errors"

	"github.com/openshift/installer/pkg/asset"
)

var (
	crsDir = filepath.Join("openshift", "crs")
)

// OperatorCRs manifests required for activating deployed operators
type OperatorCRs struct {
	FileList []*asset.File
}

var (
	_ asset.WritableAsset = (*OperatorCRs)(nil)
)

// Name returns a human friendly name for the operator
func (em *OperatorCRs) Name() string {
	return "Operator CRs"
}

// Dependencies returns all of the dependencies directly needed by the
// Master asset
func (em *OperatorCRs) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate is not required for OperatorCRs.
func (em *OperatorCRs) Generate(_ context.Context, dependencies asset.Parents) error {
	return nil
}

// Files returns the files generated by the asset.
func (em *OperatorCRs) Files() []*asset.File {
	return em.FileList
}

// Load reads the asset files from disk.
func (em *OperatorCRs) Load(f asset.FileFetcher) (found bool, err error) {
	yamlFileList, err := f.FetchByPattern(filepath.Join(crsDir, "*.yaml"))
	if err != nil {
		return false, errors.Wrap(err, "failed to load *.yaml files")
	}
	ymlFileList, err := f.FetchByPattern(filepath.Join(crsDir, "*.yml"))
	if err != nil {
		return false, errors.Wrap(err, "failed to load *.yml files")
	}

	em.FileList = append(em.FileList, yamlFileList...)
	em.FileList = append(em.FileList, ymlFileList...)
	asset.SortFiles(em.FileList)

	return len(em.FileList) > 0, nil
}
