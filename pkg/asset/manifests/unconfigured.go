package manifests

import (
	"context"

	"github.com/openshift/appliance/pkg/asset/registry"
	"github.com/openshift/installer/pkg/asset"
)

const (
	// This could be change to "cluster-manifests" once all the agent code will be migrated to using
	// assets (and will stop reading from the hard-code "manifests" relative path)
	clusterManifestDir = "cluster-manifests"
)

var (
	_ asset.WritableAsset = (*UnconfiguredManifests)(nil)
)

// UnconfiguredManifests generates the required manifests for the unconfigured ignition.
type UnconfiguredManifests struct {
	FileList []*asset.File
}

// Name returns a human friendly name.
func (m *UnconfiguredManifests) Name() string {
	return "Unconfigured Manifests"
}

// Dependencies returns all of the dependencies directly needed the asset.
func (m *UnconfiguredManifests) Dependencies() []asset.Asset {
	return []asset.Asset{
		&InfraEnv{},
		&AgentPullSecret{},
		&registry.RegistriesConf{},
	}
}

// Generate generates the respective manifest files.
func (m *UnconfiguredManifests) Generate(_ context.Context, dependencies asset.Parents) error {
	for _, a := range []asset.WritableAsset{
		&InfraEnv{},
		&AgentPullSecret{},
		&registry.RegistriesConf{},
	} {
		dependencies.Get(a)

		m.FileList = append(m.FileList, a.Files()...)
	}

	return nil
}

// Files returns the files generated by the asset.
func (m *UnconfiguredManifests) Files() []*asset.File {
	return m.FileList
}

// Load currently does nothing
func (m *UnconfiguredManifests) Load(f asset.FileFetcher) (bool, error) {
	return false, nil
}
